@inject IProductService ProductService
@implements IDisposable

<h3>ProductList</h3>

@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
    <span>@ProductService.Message</span>
}
else
{
    <div class="container  row row-cols-1 row-cols-sm-2 row-cols-md-4">
        @foreach (var product in ProductService.Products)
        {
            <div class="col-md-3 mb-lg-5">
                <a href="/product/@product.Id">
                    <div class="card">
                        @if (!string.IsNullOrEmpty(product.ImageUrl))
                        {
                            <img class="media-img" src="@product.ImageUrl" alt="@product.Name" />
                        }
                        else if (product.Images.Count > 0)
                        {
                            <img class="media-img" src="@product.Images[0].Data" alt="@product.Name" />
                        }
                        <div class="card-body">
                            <h5 class="card-title mb-3">
                                @product.Name
                            </h5>
                            <p class="card-text">
                                <b>@GetPriceText(product)</b>
                            </p>
                        </div>
                    </div>
                </a>
            </div>



            @*<li class="media my-3">
                <div class="media-img-wrapper mr-2">
                    <a href="/product/@product.Id">
                        @if (!string.IsNullOrEmpty(product.ImageUrl))
                        {
                            <img class="media-img" src="@product.ImageUrl" alt="@product.Name" />
                        }
                        else if (product.Images.Count > 0)
                        {
                            <img class="media-img" src="@product.Images[0].Data" alt="@product.Name" />
                        }
                    </a>
                </div>
                <div class="media-body">
                    <a href="/product/@product.Id">
                        <h4 class="mb-0">@product.Name</h4>
                    </a>
                    <p>@product.Description</p>
                    <h5 class="price">
                        @GetPriceText(product)
                    </h5>
                </div>
            </li>*@
        }

    </div>

     for (var i = 1; i <= ProductService.PageCount; i++)
     {
         <a class="btn @(i == ProductService.CurrentPage ? "btn-info" : "btn-outline-info") age-selection"
         href="/search/@ProductService.LastSearchText/@i">@i</a>
     }
}

@code {
    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"${variants[0].Price}";
        }
        decimal minPrice = variants.Min(v => v.Price);
        return $"Startin at ${minPrice}";
    }

}