@page "/login"
@using Microsoft.AspNetCore.WebUtilities
@inject IAuthService AuthService
@inject ILocalStorageService localStorage
@inject NavigationManager navManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICartService CartService

<PageTitle>Login</PageTitle>

<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
<section class="vh-100">
  <div class="container py-5 h-75">
    <div class="row d-flex justify-content-center align-items-center h-75">
      <div class="col-12 col-md-8 col-lg-6 col-xl-5">
        <div class="card shadow-2-strong" style="border-radius: 1rem;">
          <div class="card-body">
            <h3 class="mb-5 text-center">Sign in</h3>
            <div class="form-outline mb-4">
              <label for="email">Email</label>
              <InputText id="email" @bind-Value="user.Email" class="form-control" />
              <ValidationMessage For="@(() => user.Email)" />
            </div>
            <div class="form-outline mb-4">
              <label for="password">Password</label>
              <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
              <ValidationMessage For="@(() => user.Password)" />
            </div>
            <p class="small mb-5 pb-lg-2"><a  href="/forget-password">Forgot password?</a></p>
            <div class="text-danger">
                <span>@errorMessage</span>
            </div>
            <br />
            <div><button class="btn btn-primary btn-lg btn-block" type="submit">Login</button></div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
</EditForm>

@code {
    private UserLogin user = new UserLogin();

    private string errorMessage = string.Empty;

    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = navManager.ToAbsoluteUri(navManager.Uri);
        if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    private async Task HandleLogin()
    {
        var result = await AuthService.Login(user);
        if (result.Success)
        {
            errorMessage = string.Empty;
            await localStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            await CartService.StoreCartItems(true);
            await CartService.GetCartItemsCount();
            navManager.NavigateTo(returnUrl);
        }
        else
        {
            errorMessage = result.Message;
        }
    }
}
